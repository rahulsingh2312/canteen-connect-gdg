// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Predicts the next day's sales and suggests cooking quantities based on historical data.
 *
 * - predictSales - A function that predicts sales and suggests cooking quantities.
 * - PredictSalesInput - The input type for the predictSales function.
 * - PredictSalesOutput - The return type for the predictSales function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PredictSalesInputSchema = z.object({
  historicalSalesData: z
    .string()
    .describe(
      'Historical sales data, including date, product name, and quantity sold. This should be a string that is parsable as JSON.'
    ),
  currentInventory: z
    .string()
    .describe(
      'Current inventory levels for each product. This should be a string that is parsable as JSON.'
    ),
});
export type PredictSalesInput = z.infer<typeof PredictSalesInputSchema>;

const PredictedSalesItemSchema = z.object({
  productName: z.string().describe('The name of the product.'),
  predictedQuantity: z
    .number()
    .describe('The predicted quantity to be sold tomorrow.'),
  suggestedCookingQuantity: z
    .number()
    .describe('The suggested cooking quantity for tomorrow.'),
});

const PredictSalesOutputSchema = z.array(PredictedSalesItemSchema);

export type PredictSalesOutput = z.infer<typeof PredictSalesOutputSchema>;

export async function predictSales(input: PredictSalesInput): Promise<PredictSalesOutput> {
  return predictSalesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictSalesPrompt',
  input: {schema: PredictSalesInputSchema},
  output: {schema: PredictSalesOutputSchema},
  prompt: `You are an AI assistant designed to help canteen managers predict next day's sales and suggest cooking quantities to minimize food waste and optimize inventory.

  Analyze the historical sales data and current inventory levels provided below to predict the sales for the next day and suggest cooking quantities for each product.

  Historical Sales Data: {{{historicalSalesData}}}
  Current Inventory: {{{currentInventory}}}

  Based on this data, provide a prediction for each product, including the predicted quantity to be sold and the suggested cooking quantity.  Take into account trends in the historical data, and also the current inventory levels.

  The output should be a JSON array of objects, with each object containing the productName, predictedQuantity, and suggestedCookingQuantity.
  `,
});

const predictSalesFlow = ai.defineFlow(
  {
    name: 'predictSalesFlow',
    inputSchema: PredictSalesInputSchema,
    outputSchema: PredictSalesOutputSchema,
  },
  async input => {
    try {
      const {
        output,
      } = await prompt({
        ...input,
        historicalSalesData: input.historicalSalesData,
        currentInventory: input.currentInventory,
      });
      return output!;
    } catch (error) {
      console.error('Error in predictSalesFlow:', error);
      throw error;
    }
  }
);
